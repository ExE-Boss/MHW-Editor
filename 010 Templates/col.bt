//------------------------------------------------
//--- 010 Editor v10.0 Binary Template
//   Authors: Many. See MHW Editor Cretits.
// File Mask: *.col
//  Category: MHW_Editor.Weapons
//------------------------------------------------

typedef struct {
    uint Magic_1;
    char Name[4]<optimize=false>;
    uint Magic_2;
    uint Unk_1;
    uint Unk_2;
    uint Name_Count;
} Collisions;

typedef struct {
    string Name;
    int CLGM_Id;
    int Move_Id;
    int Unk_1;
    ushort Unk_2;
    ubyte Unk_3;
    uint Unk_4;
} Names;

typedef struct {
    uint Magic_1;
    char Name[4]<optimize=false>;
    uint Magic_2;
    uint Clgm_Count;
    uint Clgm_Type;
    ubyte Unk_1;

    typedef struct {
        uint Magic_1;
        char Name[4]<optimize=false>;
        uint Magic_2;
        uint Clgm_Inner_Count;

        typedef struct {
            ubyte Unk_1;
            ubyte Unk_2;
            float Attack_Range;
            float Unk_4;
            float Unk_5;
            float Unk_6;
            short Unk_7;
            short Unk_8;
            float Unk_9;
            float Unk_10;
            float Unk_11;
            float Unk_12;
            float Unk_13;
            float Unk_14;
            ushort Unk_15;
            uint Unk_16;
            short Unk_17;
            float Unk_18;
            float Unk_19;
            float Unk_20;
            float Unk_21;
            ushort Unk_22;
        } CLGM_Inner;

        CLGM_Inner CLGM_Inner_[Clgm_Inner_Count]<optimize=false>;
        uint Unk_1;
        uint Attack_Range_if_Unk_1_1_;
        ubyte Unk_2;
        ubyte Unk_3;
        ubyte Unk_4;
        ubyte Unk_5;
        uint Unk_6;
        uint Unk_7;
        short Unk_8;
        ushort Unk_9;
        ushort Unk_10;
        if (Clgm_Type == 2) { int Unk_11; }
        if (Clgm_Type == 2) { int Unk_12; }
        if (Clgm_Type == 2) { int Unk_13; }
        if (Clgm_Type == 2) { int Unk_14; }
        if (Clgm_Type == 2) { int Unk_15; }
        if (Clgm_Type == 2) { int Unk_16; }
        if (Clgm_Type == 2) { int Unk_17; }
        if (Clgm_Type == 2) { int Unk_18; }
        ubyte Unk_19;
    } CLGMs;

    CLGMs CLGMs_[Clgm_Count]<optimize=false>;
    ubyte Unk_2;
    ubyte Unk_3;
    ubyte Unk_4;
} CLND;

typedef struct {
    uint Magic_1;
    char Name[4]<optimize=false>;
    uint Magic_2;
    uint Move_Count;
    uint Move_Type;

    typedef struct {
        uint Index;
        uint Unk_1;
        uint Unk_2;
        float Unk_3;
        float Unk_4;
        float Unk_5;
        uint Unk_6;
        uint Unk_7;
        uint Unk_8;
        uint Unk_9;
        uint Unk_10;
        uint Unk_11;
        uint Unk_12;
        uint Unk_13;
        uint Unk_14;
        uint Unk_15;
        uint Unk_16;
        uint Unk_17;
        uint Unk_18;
        uint Unk_19;
        uint Unk_20;
        uint Unk_21;
        uint Unk_22;
        float Unk_23;
        float Unk_24;
        float Unk_25;
        uint Unk_26;
        uint Unk_27;
        uint Unk_28;
        uint Unk_29;
        float Unk_30;
        uint Unk_31;
        uint Unk_32;
        ubyte Unk_33;
        uint Unk_34;
        float Unk_35;
        float Unk_36;
        uint Unk_37;
        uint Unk_38;
        uint Unk_39;
        uint Unk_40;
        uint Unk_41;
        uint Unk_42;
        uint Unk_43;
        uint Unk_44;
        ushort Unk_45;
    } Atk0;

    if (Move_Type == 0) { Atk0 Atk0_[Move_Count]<optimize=false>; }

    typedef struct {
        uint Index;
        uint Attack_Type;
        float Motion_Value;
        float Fixed_Damage;
        float Part_Modifier;
        float Elemental_Modifier;
        float Status_Modifier;
        float Stun;
        float Exhaust;
        float Mount;
        float Unk_1;
        float Unk_2;
        ubyte Unk_3;
        float Soften_Value;
        float Unk_4;
        float Unk_5;
        float Unk_6;
        float Unk_7;
        float Unk_8;
        float Unk_9;
        float Unk_10;
        float Unk_11;
        uint Flinch_Value;
        uint Unk_12;
        ubyte Mind_s_Eye;
        float Unk_13;
        float Unk_14;
        ubyte Unk_15;
        float Hit_Lag_Speed_Multiplier_a_;
        float Unk_16;
        float Hit_Lag_a_;
        float Unk_17;
        float Unk_18;
        float Hit_Lag_Speed_Multiplier_b_;
        float Unk_19;
        float Hit_Lag_b_;
        float Unk_20;
        float Unk_21;
        uint Unk_22;
        byte Unk_23;
        ubyte Unk_24;
        uint Unk_25;
        float Unk_26;
        float Unk_27;
        float Unk_28;
        ubyte Lingering_Hurtbox;
        float Frame_Delay;
        uint Unk_29;
        ushort Unk_30;
        float Energy_Gen;
        float Conditional_Motion_value_change_replace;
        float Conditional_element_modifier_change_replace;
        uint Unk_31;
        uint Unk_32;
        uint Unk_33;
        uint Unk_34;
        uint Unk_35;
        uint Unk_36;
        uint Unk_37;
        ushort Unk_38;
    } Atk1;

    if (Move_Type == 1) { Atk1 Atk1_[Move_Count]<optimize=false>; }

    typedef struct {
        uint Index;
        uint Knock_back_Type;
        uint Knock_back_Lvl;
        uint Unk_1;
        float Motion_Value;
        uint Unk_2;
        uint Unk_3;
        float Guard_Stamina_Cost;
        uint Guard_Req;
        uint Element_Id;
        uint Unk_4;
        float Element_Dmg;
        float Unk_5;
        float Deadly_Poison;
        float Paralysis;
        float Sleep;
        float Blast;
        float Blast_Scourge;
        float Stun;
        float Bleed;
        float Miasma;
        ubyte Ele_Res_Down_Double;
        ubyte Ele_Res_Down;
        ubyte Def_Down_Double;
        ubyte Def_Down;
        uint Unk_6;
        uint Unk_7;
        float Unk_8;
        float Unk_9;
        float Unk_10;
        float Unk_11;
        float Unk_12;
        uint Unk_13;
        uint Unk_14;
        uint Unk_15;
        ubyte Unk_16;
        float Unk_17;
        uint Unk_18;
        uint Unk_19;
        uint Unk_20;
        uint Unk_21;
        uint Unk_22;
        uint Unk_23;
        uint Unk_24;
        uint Unk_25;
        uint Unk_26;
        ushort Unk_27;
    } Atk2;

    if (Move_Type == 2) { Atk2 Atk2_[Move_Count]<optimize=false>; }

    typedef struct {
        uint Index;
        uint Damage_Type_1;
        uint Damage_Type_2;
        float Damage_Motion_Value;
        float Fixed_Damage;
        float Modifier_PartDamage;
        uint Element_Type;
        float Fixed_Elemental_Damage;
        float Modifier_Element;
        float Modifier_Status;
        float Fixed_Status_Value_Poison;
        float Fixed_Status_Value_Paralysis;
        float Fixed_Status_Value_Sleep;
        float Fixed_Status_Value_Blast;
        float Extra_Stun;
        float Extra_Exhaust;
        float Fixed_Status_Value_Traq;
        float Unk_1;
        float Unk_2;
        float Soften_Value;
        float Unk_3;
        float Unk_4;
        float Unk_5;
        float Unk_6;
        float Unk_7;
        float Unk_8;
        uint Unk_9;
        uint Unk_10;
        uint Unk_11;
        uint Unk_12;
        uint Unk_13;
        uint Unk_14;
        byte Unk_15;
        ubyte Unk_16;
        ubyte Unk_17;
        uint Unk_18;
        uint Unk_19;
        float Unk_20;
        uint Unk_21;
        ubyte Piercing_Attack;
        float Delay_Between_Attack_Frames;
        ubyte Unk_22;
        uint Unk_23;
        uint Unk_24;
        uint Unk_25;
        uint Unk_26;
        uint Unk_27;
        uint Unk_28;
        uint Unk_29;
        uint Unk_30;
        uint Unk_31;
        uint Unk_32;
        uint Unk_33;
        ushort Unk_34;
    } Atk3;

    if (Move_Type == 3) { Atk3 Atk3_[Move_Count]<optimize=false>; }
} Moves;

typedef struct {
    uint Magic_1;
    uint Magic_2;
    char Name[4]<optimize=false>;
    uint Magic_3;

    typedef struct {
        ubyte Unk;
    } End_Junk;

    End_Junk End_Junk_;
} OAP;

Collisions Collisions_;
Names Names_[Collisions_.Name_Count]<optimize=false>;
CLND CLND_;
Moves Moves_;
OAP OAP_;
