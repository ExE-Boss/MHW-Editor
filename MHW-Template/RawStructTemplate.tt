<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)\MHW-Template.dll" #>
<#@ parameter type="System.String" name="_namespace" #>
<#@ parameter type="System.String" name="className" #>
<#@ parameter type="MHW_Template.MhwStructData" name="structData" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="System.Text.RegularExpressions" #>
using MHW_Template;

namespace <#= _namespace #> {
    // Struct Size: "<#= structData.size #>"
    // Initial Offset: "<#= structData.offsetInitial #>"
    // Unique Id Formula: "<#= structData.uniqueIdFormula #>"
    public struct <#= className #> {
<#
    var compiler = new CSharpCodeProvider();
    long baseOffset = 0; // Used in autoOffset.
    var newList = new List<MhwStructData.Entry>(structData.entries);
    newList.Sort((entry1, entry2) => entry1.offset.CompareTo(entry2.offset));

    foreach (var entry in newList) {
        if (entry.forceUnique)
            continue;

        var realOffset = structData.autoOffset? baseOffset : (long) entry.offset;

        if (structData.autoOffset) {
            baseOffset += Marshal.SizeOf(entry.type);
        }

        var name = Regex.Replace(entry.displayName, @"[^\w\d]+", "_");
        var typeString = compiler.GetTypeOutput(new CodeTypeReference(entry.type));
        WriteLine($"        public {typeString} {name}; // Offset: {realOffset}");
    }
#>
    }
}