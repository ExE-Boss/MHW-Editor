<#@ template language="C#" #>
<#@ output extension=".bt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)\MHW-Template.dll" #>
<#@ parameter type="System.String" name="_namespace" #>
<#@ parameter type="System.String" name="className" #>
<#@ parameter type="MHW_Template.Struct_Generation.Single.MhwStructData" name="structData" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.CSharp" #>
//------------------------------------------------
//--- 010 Editor v10.0 Binary Template
//------------------------------------------------

<#
    var compiler = new CSharpCodeProvider();
    long offsetOffset = 0; // An offset to our offset for all subsequent offsets.
    long baseOffset = 0; // Used in autoOffset.

    // Sorting by offset fucks with the addOffset part.
    //var newList = new List<MhwStructData.Entry>(structData.entries);
    //newList.Sort((entry1, entry2) => entry1.offset.CompareTo(entry2.offset));

    foreach (var entry in structData.entries) {
        var realOffset = structData.autoOffset ? baseOffset : (long) entry.offset + offsetOffset;
        offsetOffset += entry.addOffset;

        if (structData.autoOffset) {
           baseOffset += Marshal.SizeOf(entry.type);
       }

        if (entry.forceUnique) continue;

        var name = Regex.Replace(entry.displayName, @"[^\w\d]+", "_");
        var typeString = compiler.GetTypeOutput(new CodeTypeReference(entry.type));
        if (typeString == "byte") typeString = "ubyte";
        if (typeString == "sbyte") typeString = "byte";
        WriteLine($"FSeek({realOffset}); {typeString} {name};");
    }
#>