<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)\MHW-Template.dll" #>
<#@ parameter type="System.String" name="_namespace" #>
<#@ parameter type="System.String" name="className" #>
<#@ parameter type="MHW_Template.Struct_Generation.Single.MhwStructData" name="structData" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.CSharp" #>
using System;
using System.ComponentModel;
using MHW_Editor.Assets;
using MHW_Editor.Models;
using MHW_Template;
using MHW_Template.Models;

namespace <#= _namespace #> {
    public partial class <#= className #> {
        public const uint StructSize = <#= structData.size #>;
        public const ulong InitialOffset = <#= structData.offsetInitial #>;
        public const long EntryCountOffset = <#= structData.entryCountOffset #>;
        public const string EncryptionKey = <#= structData.encryptionKey == null ? "null" : $"\"{structData.encryptionKey}\"" #>;
        public override string UniqueId => $"<#= structData.uniqueIdFormula #>";
<#
    var compiler = new CSharpCodeProvider();
    var sortIndex = 50;
    long offsetOffset = 0; // An offset to our offset for all subsequent offsets.
    long baseOffset = 0; // Used in autoOffset.

    foreach (var entry in structData.entries) {
        var realOffset = structData.autoOffset? baseOffset : (long) entry.offset + offsetOffset;
        offsetOffset += entry.addOffset;

        if (structData.autoOffset) {
            baseOffset += Marshal.SizeOf(entry.type);
        }

        var accessLevel = entry.accessLevel;
        if (accessLevel != "private") {
            accessLevel += " virtual";
        }

        var name = Regex.Replace(entry.displayName, @"[^\w\d]+", "_");
        if (entry.forceUnique) {
            name += $"_{sortIndex}";
        }

        var typeString = compiler.GetTypeOutput(new CodeTypeReference(entry.type));
        string returnString;
        var setCast = "";
        var getCast = "";

        if (entry.enumReturn == null) {
            returnString = typeString;
        } else {
            returnString = compiler.GetTypeOutput(new CodeTypeReference(entry.enumReturn));
            getCast = $"({returnString}) ";
            setCast = $"({typeString}) ";
        }

        // Main property.
        WriteLine("");
        WriteLine($"        public const string {name}_displayName = \"{entry.displayName}\";");
        WriteLine($"        public const int {name}_sortIndex = {sortIndex};");
        WriteLine($"        [SortOrder({name}_sortIndex)]");
        WriteLine($"        [DisplayName({name}_displayName)]");

        if (entry.dataSourceType != null) {
            WriteLine($"        [DataSource(DataSourceType.{entry.dataSourceType})]");
        }

        if (entry.readOnly) {
            WriteLine($"        [IsReadOnly]");
        }

        WriteLine($"        {accessLevel} {returnString} {name} {{");

        if (returnString == "bool") {
            WriteLine($"            get => {getCast}Convert.ToBoolean(GetData<{typeString}>({realOffset}));");
        } else {
            WriteLine($"            get => {getCast}GetData<{typeString}>({realOffset});");
        }

        // Always include a setter, even for readOnly. This enables us to bypass readOnly via command line switch.
        WriteLine("            set {");

        if (returnString == "bool") {
            WriteLine($"                if (Convert.ToBoolean(GetData<{typeString}>({realOffset})) == {entry.valueString}) return;"); // Do nothing if the value is the same.
            WriteLine($"                SetData({realOffset}, Convert.ToByte({entry.valueString}), nameof({name}));");
        } else {
            WriteLine($"                if ({getCast}GetData<{typeString}>({realOffset}) == {entry.valueString}) return;"); // Do nothing if the value is the same.
            WriteLine($"                SetData({realOffset}, {setCast}{entry.valueString}, nameof({name}));");
        }

        WriteLine("                OnPropertyChanged(nameof(Raw_Data));");
        WriteLine($"                OnPropertyChanged(nameof({name}));");

        if (entry.dataSourceType != null) {
            WriteLine($"                OnPropertyChanged(nameof({name}_button));");
        }

        if (entry.extraOnPropertyChanged != null) {
            foreach (var propertyToChange in entry.extraOnPropertyChanged) {
                var propertyToChangeName = Regex.Replace(propertyToChange, @"[^\w\d]+", "_");

                WriteLine($"                OnPropertyChanged(nameof({propertyToChangeName}));");
            }
        }

        WriteLine("            }");

        WriteLine("        }");

        if (entry.dataSourceType != null) {
            var dataSourceLookup = GenerationHelper.GetDataSourceType(entry.dataSourceType ?? throw new Exception());

            WriteLine("");
            WriteLine($"        [SortOrder({name}_sortIndex)]");
            WriteLine($"        [DisplayName({name}_displayName)]");
            WriteLine($"        [CustomSorter(typeof({entry.dataSourceCustomSorter}))]");
            WriteLine($"        public string {name}_button => {dataSourceLookup}.TryGet({name}).ToStringWithId({name});");
        }

        if (entry.createPercentField) {
            WriteLine("");
            WriteLine($"        private float _{name}Percent;");
            WriteLine($"        [SortOrder({name}_sortIndex + 1)]");
            WriteLine($"        [DisplayName({name}_displayName + \"%\")]");
            WriteLine($"        public float {name}_percent {{");
            WriteLine($"            get => _{name}Percent;");
            WriteLine($"            set {{");
            WriteLine($"                _{name}Percent = value.Clamp(0f, 100f);");
            WriteLine($"                OnPropertyChanged(nameof({name}_percent));");
            WriteLine($"            }}");
            WriteLine($"        }}");
        }

        sortIndex += 50;
    }
#>

        public const int lastSortIndex = <#= sortIndex #>;
    }
}